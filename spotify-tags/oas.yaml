openapi: 3.0.0
info:
  title: Spotify tags
  description: Spotify tags and playlists manager
  version: 1.0.0
servers:
  - url: /
paths:
  /:
    get:
      summary: health check
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: aws_proxy
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:462555053910:function:spotify-tags-HelloWorldFunction-8gA0Ab0oyhlm/invocations
        responses:
          default:
            statusCode: 200
      responses:
        200:
          description: service is up
          content:
            application/text:
              schema:
                type: string
              example: 'UP'
  /tracks:
    get:
      summary: get all tracks
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: aws_proxy
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:462555053910:function:spotify-tags-HelloWorldFunction-8gA0Ab0oyhlm/invocations
        responses:
          default:
            statusCode: 200
      responses:
        200:
          description: list of tracks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
  /tracks/{id}:
    delete:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: track id
          required: true
      summary: delete track
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: aws_proxy
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:462555053910:function:spotify-tags-HelloWorldFunction-8gA0Ab0oyhlm/invocations
        responses:
          default:
            statusCode: 201
      responses:
        201:
          description: track deleted successfully
    patch:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: track id
          required: true
      summary: update track tags
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: aws_proxy
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:462555053910:function:spotify-tags-HelloWorldFunction-8gA0Ab0oyhlm/invocations
        responses:
          default:
            statusCode: 200
      responses:
        200:
          description: track tag updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
  /label-track:
    post:
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: aws_proxy
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:462555053910:function:spotify-tags-HelloWorldFunction-8gA0Ab0oyhlm/invocations
        responses:
          default:
            statusCode: 200
      summary: tag spotify track
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagRequest'
      responses:
        200:
          description: track tagged successfully
          content:
            text/plain:
              schema:
                type: string
                example: 'SUCCESS'
                default: 'SUCCESS'
  /playlists:
    post:
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: aws_proxy
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:462555053910:function:spotify-tags-HelloWorldFunction-8gA0Ab0oyhlm/invocations
        responses:
          default:
            statusCode: 200
      summary: create private playlist
      security:
        - SpotifyAccessTokenAuthorizer: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  type: array
                  items:
                    type: string
                    example: 'abcderfg'
                tracks:
                  type: array
                  items:
                    type: string
                    example: 'https://open.spotify.com/track/2KVb1qFVI8n9VuCucFS56k'
      responses:
        201:
          description: playlist created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'

components:
  securitySchemes:
    SpotifyAccessTokenAuthorizer:
      type: "apiKey"
      name: "x-spotify-access-token"
      in: "header"
      x-amazon-apigateway-authtype: "custom"
      x-amazon-apigateway-authorizer:
        authorizerUri: "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:462555053910:function:spotify-tags-LambdaAuthorizer-8Cw5itO7ugqi/invocations"
        authorizerResultTtlInSeconds: 300
        type: "token"
  schemas:
    Track:
      type: object
      properties:
        id:
          type: string
          example: ''
        tags:
          type: array
          items:
            type: string
        metadata:
          type: object
    TagRequest:
      type: object
      properties:
        track:
          type: string
          example: 'https://open.spotify.com/track/2KVb1qFVI8n9VuCucFS56k'
        labels:
          type: array
          items:
            type: string
            example: 'first second third'
    Playlist:
        type: object
        required:
          - id
          - external_urls
        properties:
          description:
            type: string
          external_urls:
            type: object
            properties:
              spotify:
                  type: string
          id:
            type: string
